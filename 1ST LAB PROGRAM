1#include <stdio.h>
#include <ctype.h>

#define MAX_LEN 100

// Check if a string is a valid identifier
int is_identifier(char* str) {
    if (isalpha(str[0]) || str[0] == '_') {
        for (int i = 1; str[i] != '\0'; i++) {
            if (!isalnum(str[i]) && str[i] != '_') return 0;
        }
        return 1;
    }
    return 0;
}

// Lexical analyzer function
void lex_analyzer(const char* source) {
    char ch, buffer[MAX_LEN];
    int i = 0;
    int j = 0;
    
    // Go through each character in the input source string
    while ((ch = source[i++]) != '\0') {
        // Ignore spaces, tabs, newlines
        if (isspace(ch)) continue;
        
        // Handle comments
        if (ch == '/') {
            ch = source[i++];
            if (ch == '/') { // Single-line comment
                while ((ch = source[i++]) != '\n' && ch != '\0');
            } else if (ch == '*') { // Multi-line comment
                while ((ch = source[i++]) != '\0') {
                    if (ch == '*' && source[i] == '/') {
                        i++; // Skip '/'
                        break;
                    }
                }
            }
            continue;
        }
        
        // Handle identifiers and constants
        if (isalnum(ch) || ch == '_') {
            buffer[j++] = ch;
            while ((ch = source[i++]) != '\0' && (isalnum(ch) || ch == '_')) {
                buffer[j++] = ch;
            }
            buffer[j] = '\0';
            if (is_identifier(buffer)) {
                printf("Identifier: %s\n", buffer);
            } else {
                printf("Constant: %s\n", buffer);
            }
            j = 0;
            i--; // Put back the non-identifier character
        }
        // Handle operators
        else if (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '=')
            printf("Operator: %c\n", ch);
    }
}

int main() {
    // Directly provided source code as string
    const char* source_code = 
        "int main() {\n"
        "    int num = 10;\n"
        "    float x = 3.14;\n"
        "    // This is a comment\n"
        "    num = num + 1;\n"
        "}";

    lex_analyzer(source_code);
    return 0;
}
